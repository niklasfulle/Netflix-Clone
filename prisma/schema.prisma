generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User{
  id                    String    @id @unique @default(cuid())
  name                  String
  image                 String?
  email                 String?   @unique
  emailVerified         DateTime?
  hashedPassword        String?
  role                  UserRole  @default(USER)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt 
  accounts              Account[]
  profil                Profil[]
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id    String  @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  
  @@unique([email, token])
}

model TwoFactorToken {
  id    String  @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  
  @@unique([email, token])
}

model TwoFactorConfirmation{
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Profil {
  id             String    @id @unique @default(cuid())
  userId         String
  name           String
  image          String?
  inUse          Boolean   @default(false)
  createdAt      DateTime  @default(now())
  favoriteIds    String[]
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Movie {
  id           String @id @unique @default(cuid())
  title        String
  description  String
  videoUrl     String
  thumbnailUrl String
  type         String
  genre        String
  actor        String
  duration     String
  createdAt    DateTime  @default(now())
}

model ProfilImg {
  id           String @id @unique @default(cuid())
  url          String
}

model MovieWatchTime {
  id           String @id @unique @default(cuid())
  userId       String
  profilId     String
  movieId      String
  time         Int
}

model Playlist {
  id                String @id @unique @default(cuid())
  userId            String
  profilId          String
  title             String
  PlaylistEntrys    PlaylistEntry[]
}

model PlaylistEntry {
  id           String @id @unique @default(cuid())
  playlistId   String
  playlist     Playlist     @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  order        Int
  movieId      String
}